// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: doggo-proto/mailing.proto

package mailing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mailing_SendActivationMail_FullMethodName = "/mailing.Mailing/SendActivationMail"
	Mailing_Ping_FullMethodName               = "/mailing.Mailing/Ping"
)

// MailingClient is the client API for Mailing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailingClient interface {
	SendActivationMail(ctx context.Context, in *SendActivationMailRequest, opts ...grpc.CallOption) (*SendActivationMailResponse, error)
	// default ping response for microservice
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type mailingClient struct {
	cc grpc.ClientConnInterface
}

func NewMailingClient(cc grpc.ClientConnInterface) MailingClient {
	return &mailingClient{cc}
}

func (c *mailingClient) SendActivationMail(ctx context.Context, in *SendActivationMailRequest, opts ...grpc.CallOption) (*SendActivationMailResponse, error) {
	out := new(SendActivationMailResponse)
	err := c.cc.Invoke(ctx, Mailing_SendActivationMail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Mailing_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailingServer is the server API for Mailing service.
// All implementations must embed UnimplementedMailingServer
// for forward compatibility
type MailingServer interface {
	SendActivationMail(context.Context, *SendActivationMailRequest) (*SendActivationMailResponse, error)
	// default ping response for microservice
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedMailingServer()
}

// UnimplementedMailingServer must be embedded to have forward compatible implementations.
type UnimplementedMailingServer struct {
}

func (UnimplementedMailingServer) SendActivationMail(context.Context, *SendActivationMailRequest) (*SendActivationMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendActivationMail not implemented")
}
func (UnimplementedMailingServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMailingServer) mustEmbedUnimplementedMailingServer() {}

// UnsafeMailingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailingServer will
// result in compilation errors.
type UnsafeMailingServer interface {
	mustEmbedUnimplementedMailingServer()
}

func RegisterMailingServer(s grpc.ServiceRegistrar, srv MailingServer) {
	s.RegisterService(&Mailing_ServiceDesc, srv)
}

func _Mailing_SendActivationMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendActivationMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServer).SendActivationMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mailing_SendActivationMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServer).SendActivationMail(ctx, req.(*SendActivationMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailing_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mailing_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mailing_ServiceDesc is the grpc.ServiceDesc for Mailing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mailing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mailing.Mailing",
	HandlerType: (*MailingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendActivationMail",
			Handler:    _Mailing_SendActivationMail_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Mailing_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doggo-proto/mailing.proto",
}
